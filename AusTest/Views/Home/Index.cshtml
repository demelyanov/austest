@model IList<RequirementDto>
@{
    ViewData["Title"] = "Requirements - AusTest";
}

<div class="row">
    <div class="col-md-8">
        <h2>Requirements</h2>
    </div>
    <div class="col-md-4 text-right top-toolbar ">
        <a href="/home/item" class="btn btn-default" id="btn-add" title="Add new requirement"><i class="fa fa-plus"></i> Requirement</a>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="row">
                    <h3 class="panel-title col-md-9">Requirements</h3>
                </div>
            </div>
            <div class="panel-body">
                <table class="table" id="req-list">
                    <thead>
                        <tr>
                            <th class="text-center">ID</th>
                            <th class="text-left">Name</th>
                            <th class="text-left">Description</th>
                            <th>Actions</th>
                        </tr>

                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="text-center v-table-align">@item.Id</td>
                                <td class="text-left v-table-align ">@item.Name</td>
                                <td class="text-left v-table-align">@item.Description</td>
                                <td class="v-table-align">
                                    <a href="#" req-id="@item.Id"><i class="fa fa-2x fa-remove"></i></a>
                                    <a href="/home/item/@item.Id"><i class="fa fa-2x fa-edit"></i></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>

@await Html.PartialAsync("_RequirementForm", new RequirementDto())

@section styles{
    <link rel="stylesheet" href="~/lib/datatables.net-bs/css/dataTables.bootstrap.min.css" />
}

@section scripts{
    <script type="text/javascript" src="~/lib/datatables.net/js/jquery.dataTables.js"></script>
    <script type="text/javascript" src="~/lib/datatables.net-bs/js/dataTables.bootstrap.js"></script>
    <script type="text/javascript" src="~/lib/bootbox.js/bootbox.js"></script>
    <script type="text/javascript">

        $(document).ready(function () { 
            $('#req-list').DataTable({
                'paging': true,
                "pagingType": "full_numbers"
            });


            $('#btn-add').on('click', function (e) {
                e.preventDefault();
                $('#req-dlg').modal({ show: true });
            });

            $('#req-dlg').on('hidden.bs.modal', function (e) {
                // clear form
                $('#login-frm input, #login-frm textarea').val('');
                var validator = $("#login-frm").validate();
                validator.resetForm();
                $("#login-frm")[0].reset();
                console.log('validation');
                // TODO: use another variant

            })

            $('#btn-save').on('click', function (e) {
                e.preventDefault();

                if (!$('#login-frm').valid())
                    return;

                $('#btn-close').click();

                var data = {
                    Id: $('#Id').val(),
                    Name: $('#Name').val(),
                    Description: $('#Description').val()
                };

                $.ajax({
                    url: '/home/_save',
                    method: 'post',
                    data: data,
                    success: function (result) { 
                        if (true == result.success) {

                            var box = bootbox.alert({
                                title: 'Requirement saving',
                                message: `Requirement has been saved.`,
                                callback: function () {
                                    window.location.reload();
                                }
                            });
                            centerBox(box);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) { 
                        var errBox = bootbox.alert({
                            title: 'Unexpected error',
                            message: `Error: ${textStatus} - ${errorThrown}`
                        });
                        centerBox(errBox);
                    }
                });
            });

            $('.fa-remove').on('click', function (e) {
                e.preventDefault();
                var reqId = $(this).parent().attr('req-id');
                var dlgSrc = `<div class='row'>
                            <div class='col-md-10 col-md-offset-1'>
                            <p>Please confirm you want to delete. Type DELETE in the box below to continue.</p>
                            </div>
                              <div class='col-md-4 col-md-offset-4'>
                                <input id='validation-word' class='form-control'>
                              </div>
                                <div class='col-md-10 col-md-offset-1 field-validation-error text-center' id='delete-error' style='display: none;'>
                                    <p>Please type 'DELETE'</p>
                                </div>
                        </div>`;

                var dlgBox = bootbox.dialog({
                    closeButton: false,
                    title: 'Requirement deleting',
                    message: dlgSrc,
                    buttons: {
                        cancel: {
                            label: "Cancel",
                            className: 'btn-default',
                            callback: function () {
                            }
                        },

                        btnok: {
                            label: "OK",
                            className: 'btn-default',
                            callback: function () {
                                var word = $('#validation-word').val();
                                if ('DELETE' !== word) { 
                                    $('#delete-error').show();
                                    $('#validation-word').addClass('input-validation-error');
                                    $('#validation-word').focus();
                                    return false;
                                }
                                deleteRequirement(reqId);
                                return true;
                            }
                        }
                    }
                });
                centerBox(dlgBox);
            });
            $('.fa-edit').on('click', function (e) {
                e.preventDefault();
                console.log('load data');
            });
        });

        function deleteRequirement(reqId)
        {
            $.ajax({
                url: '/home/_delete?' + new Date().getTime(),
                method: 'post',
                cache: false,
                data: { id: reqId },
                success: function (result) { 
                    console.log('removed');
                    window.location.reload();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var errBox = bootbox.alert({
                        title: 'Unexpected error',
                        message: `Error: ${textStatus} - ${errorThrown}`
                    });
                    centerBox(errBox);
                }
            });
        }

        function loadRequirement(id) { 
            $.ajax({
                url: '/home/_delete?' + new Date().getTime(),
                method: 'post',
                cache: false,
                data: { id: reqId },
                success: function (result) {
                    /* fill dialog */
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var errBox = bootbox.alert({
                        title: 'Unexpected error',
                        message: `Error: ${textStatus} - ${errorThrown}`
                    });
                    centerBox(errBox);
                }
            });
        };

        function centerBox(boxCtrl) {
            boxCtrl.css({
                'top': '50%',
                'margin-top': function () {
                    return -(boxCtrl.height() / 2);
                }
            });
        };

    </script>
}
